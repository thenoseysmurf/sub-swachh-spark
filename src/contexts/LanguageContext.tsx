import React, { createContext, useContext, useState, ReactNode } from 'react';

type Language = 'en' | 'hi';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const translations = {
  en: {
    // Dashboard
    'dashboard.welcome': 'Hi, {name}! üëã',
    'dashboard.welcomeSubtitle': 'Welcome to your dashboard',
    'dashboard.monthlySpend': 'Monthly Spend',
    'dashboard.deadSpend': 'Dead Spend',
    'dashboard.subscriptions': 'subscriptions',
    'dashboard.inactiveSubscriptions': 'inactive subs',
    'dashboard.monthlySpendTrend': 'Monthly Spend Trend',
    'dashboard.yourSubscriptions': 'Your Subscriptions',
    'dashboard.active': 'active',
    'dashboard.manage': 'Manage',
    'dashboard.noSubscriptionsFound': 'No subscriptions found',
    'dashboard.tryAdjustingFilters': 'Try adjusting your filters',
    
    // Filters
    'filters.all': 'All',
    'filters.inactive': 'Inactive',
    'filters.paused': 'Paused',
    
    // Categories
    'category.ott': 'OTT',
    'category.music': 'Music',
    'category.productivity': 'Productivity',
    'category.food': 'Food',
    
    // Settings Menu
    'settings.configureAlerts': 'Configure Alerts',
    'settings.language': 'Language',
    'settings.logout': 'Logout',
    'settings.english': 'English',
    'settings.hindi': 'Hindi',
    
    // Configure Alerts
    'alerts.title': 'Smart Alerts',
    'alerts.preRenewalAlerts': 'Pre-renewal Alerts',
    'alerts.alertChannels': 'Alert Channels',
    'alerts.quietHours': 'Quiet Hours',
    'alerts.saveSettings': 'Save Settings',
    'alerts.settingsSaved': 'Settings saved successfully!',
    'alerts.days': 'days before',
    'alerts.push': 'Push',
    'alerts.sms': 'SMS',
    'alerts.email': 'Email',
  },
  hi: {
    // Dashboard
    'dashboard.welcome': '‡§®‡§Æ‡§∏‡•ç‡§§‡•á, {name}! üëã',
    'dashboard.welcomeSubtitle': '‡§Ü‡§™‡§ï‡•á ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
    'dashboard.monthlySpend': '‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§ñ‡§∞‡•ç‡§ö',
    'dashboard.deadSpend': '‡§¨‡§Ç‡§¶ ‡§ñ‡§∞‡•ç‡§ö',
    'dashboard.subscriptions': '‡§∏‡§¨‡•ç‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§®',
    'dashboard.inactiveSubscriptions': '‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∏‡§¨‡•ç‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§®',
    'dashboard.monthlySpendTrend': '‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§ñ‡§∞‡•ç‡§ö ‡§™‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø',
    'dashboard.yourSubscriptions': '‡§Ü‡§™‡§ï‡•á ‡§∏‡§¨‡•ç‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§®',
    'dashboard.active': '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø',
    'dashboard.manage': '‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç',
    'dashboard.noSubscriptionsFound': '‡§ï‡•ã‡§à ‡§∏‡§¨‡•ç‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ',
    'dashboard.tryAdjustingFilters': '‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç',
    
    // Filters
    'filters.all': '‡§∏‡§≠‡•Ä',
    'filters.inactive': '‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø',
    'filters.paused': '‡§∞‡•ã‡§ï ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ',
    
    // Categories
    'category.ott': '‡§ì‡§ü‡•Ä‡§ü‡•Ä',
    'category.music': '‡§∏‡§Ç‡§ó‡•Ä‡§§',
    'category.productivity': '‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§ï‡§§‡§æ',
    'category.food': '‡§≠‡•ã‡§ú‡§®',
    
    // Settings Menu
    'settings.configureAlerts': '‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç',
    'settings.language': '‡§≠‡§æ‡§∑‡§æ',
    'settings.logout': '‡§≤‡•â‡§ó‡§Ü‡§â‡§ü',
    'settings.english': '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä',
    'settings.hindi': '‡§π‡§ø‡§Ç‡§¶‡•Ä',
    
    // Configure Alerts
    'alerts.title': '‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Ö‡§≤‡§∞‡•ç‡§ü',
    'alerts.preRenewalAlerts': '‡§®‡§µ‡•Ä‡§®‡•Ä‡§ï‡§∞‡§£ ‡§™‡•Ç‡§∞‡•ç‡§µ ‡§Ö‡§≤‡§∞‡•ç‡§ü',
    'alerts.alertChannels': '‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§ö‡•à‡§®‡§≤',
    'alerts.quietHours': '‡§∂‡§æ‡§Ç‡§§ ‡§ò‡§Ç‡§ü‡•á',
    'alerts.saveSettings': '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç',
    'alerts.settingsSaved': '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡•á‡§µ ‡§π‡•Å‡§à‡§Ç!',
    'alerts.days': '‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á',
    'alerts.push': '‡§™‡•Å‡§∂',
    'alerts.sms': '‡§è‡§∏‡§è‡§Æ‡§è‡§∏',
    'alerts.email': '‡§à‡§Æ‡•á‡§≤',
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('en');

  const t = (key: string, params?: { [key: string]: string }): string => {
    let translation = translations[language][key] || key;
    
    if (params) {
      Object.keys(params).forEach(param => {
        translation = translation.replace(`{${param}}`, params[param]);
      });
    }
    
    return translation;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};